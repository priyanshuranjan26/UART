module uart_tx #(parameter CLK_FREQ = 50000000, BAUD_RATE = 9600)(
    input wire clk,
    input wire rst,
    input wire start,
    input wire [7:0] data_in,
    output reg tx,
    output reg busy
);
    localparam CLKS_PER_BIT = CLK_FREQ / BAUD_RATE;

    reg [3:0] bit_index = 0;
    reg [9:0] shift_reg;
    reg [15:0] clk_count = 0;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            tx <= 1;
            busy <= 0;
            shift_reg <= 10'b1111111111;
            clk_count <= 0;
            bit_index <= 0;
        end else begin
            if (start && !busy) begin
                shift_reg <= {1'b1, data_in, 1'b0}; // stop bit + data + start bit
                busy <= 1;
                clk_count <= 0;
                bit_index <= 0;
            end else if (busy) begin
                if (clk_count == CLKS_PER_BIT - 1) begin
                    clk_count <= 0;
                    tx <= shift_reg[bit_index];
                    bit_index <= bit_index + 1;
                    if (bit_index == 9) begin
                        busy <= 0;
                    end
                end else begin
                    clk_count <= clk_count + 1;
                end
            end else begin
                tx <= 1;
            end
        end
    end
endmodule






module uart_rx #(parameter CLK_FREQ = 50000000, BAUD_RATE = 9600)(
    input wire clk,
    input wire rst,
    input wire rx,
    output reg [7:0] data_out,
    output reg valid
);
    localparam CLKS_PER_BIT = CLK_FREQ / BAUD_RATE;
    localparam CLKS_HALF_BIT = CLKS_PER_BIT / 2;

    reg [3:0] bit_index = 0;
    reg [7:0] shift_reg = 0;
    reg [15:0] clk_count = 0;
    reg [1:0] state = 0;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            data_out <= 0;
            valid <= 0;
            clk_count <= 0;
            bit_index <= 0;
            shift_reg <= 0;
            state <= 0;
        end else begin
            case (state)
                0: begin // IDLE, wait for start bit
                    valid <= 0;
                    if (!rx) begin
                        clk_count <= 0;
                        state <= 1;
                    end
                end
                1: begin // Wait half bit, align to middle of first data bit
                    if (clk_count == CLKS_HALF_BIT) begin
                        clk_count <= 0;
                        bit_index <= 0;
                        state <= 2;
                    end else begin
                        clk_count <= clk_count + 1;
                    end
                end
                2: begin // Read 8 bits
                    if (clk_count == CLKS_PER_BIT - 1) begin
                        clk_count <= 0;
                        shift_reg[bit_index] <= rx;
                        bit_index <= bit_index + 1;
                        if (bit_index == 7)
                            state <= 3;
                    end else begin
                        clk_count <= clk_count + 1;
                    end
                end
                3: begin // Wait stop bit
                    if (clk_count == CLKS_PER_BIT - 1) begin
                        clk_count <= 0;
                        data_out <= shift_reg;
                        valid <= 1;
                        state <= 0;
                    end else begin
                        clk_count <= clk_count + 1;
                    end
                end
            endcase
        end
    end
endmodule
